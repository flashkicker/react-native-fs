{"version":3,"file":"react-native-fs.development.cjs","sources":["../src/index.ts"],"sourcesContent":["/**\n * React Native FS\n * @flow\n */\n// This file supports both iOS and Android\n\nimport RN from 'react-native';\nimport base64 from 'base-64';\nimport utf8 from 'utf8';\n\nvar RNFSManager = RN.NativeModules.RNFSManager;\nvar NativeEventEmitter = RN.NativeEventEmitter;\nvar RNFS_NativeEventEmitter = new NativeEventEmitter(RNFSManager);\nvar RNFSFileTypeRegular = RNFSManager.RNFSFileTypeRegular;\nvar RNFSFileTypeDirectory = RNFSManager.RNFSFileTypeDirectory;\n\nvar isIOS = RN.Platform.OS === 'ios';\nvar jobId = 0;\n\nvar getJobId = () => {\n  jobId += 1;\n  return jobId;\n};\n\nvar normalizeFilePath = (path: string) => (path.startsWith('file://') ? path.slice(7) : path);\n\ntype MkdirOptions = {\n  NSURLIsExcludedFromBackupKey?: boolean; // iOS only\n  NSFileProtectionKey?: string; // IOS only\n};\n\ntype FileOptions = {\n  NSFileProtectionKey?: string; // IOS only\n};\n\ntype ReadDirItem = {\n  ctime?: Date;    // The creation date of the file (iOS only)\n  mtime?: Date;    // The last modified date of the file\n  name: string;     // The name of the item\n  path: string;     // The absolute path to the item\n  size: string;     // Size in bytes\n  isFile: () => boolean;        // Is the file just a file?\n  isDirectory: () => boolean;   // Is the file a directory?\n};\n\ntype StatResult = {\n  name?: string;     // The name of the item TODO: why is this not documented?\n  path: string;     // The absolute path to the item\n  size: string;     // Size in bytes\n  mode: number;     // UNIX file mode\n  ctime: number;    // Created date\n  mtime: number;    // Last modified date\n  originalFilepath: string;    // In case of content uri this is the pointed file path, otherwise is the same as path\n  isFile: () => boolean;        // Is the file just a file?\n  isDirectory: () => boolean;   // Is the file a directory?\n};\n\ntype Headers = { [name: string]: string };\ntype Fields = { [name: string]: string };\n\ntype DownloadFileOptions = {\n  fromUrl: string;          // URL to download file from\n  toFile: string;           // Local filesystem path to save the file to\n  headers?: Headers;        // An object of headers to be passed to the server\n  background?: boolean;     // Continue the download in the background after the app terminates (iOS only)\n  discretionary?: boolean;  // Allow the OS to control the timing and speed of the download to improve perceived performance  (iOS only)\n  cacheable?: boolean;      // Whether the download can be stored in the shared NSURLCache (iOS only)\n  progressInterval?: number;\n  progressDivider?: number;\n  begin?: (res: DownloadBeginCallbackResult) => void;\n  progress?: (res: DownloadProgressCallbackResult) => void;\n  resumable?: () => void;    // only supported on iOS yet\n  connectionTimeout?: number; // only supported on Android yet\n  readTimeout?: number;       // supported on Android and iOS\n  backgroundTimeout?: number; // Maximum time (in milliseconds) to download an entire resource (iOS only, useful for timing out background downloads)\n};\n\ntype DownloadBeginCallbackResult = {\n  jobId: number;          // The download job ID, required if one wishes to cancel the download. See `stopDownload`.\n  statusCode: number;     // The HTTP status code\n  contentLength: number;  // The total size in bytes of the download resource\n  headers: Headers;       // The HTTP response headers from the server\n};\n\ntype DownloadProgressCallbackResult = {\n  jobId: number;          // The download job ID, required if one wishes to cancel the download. See `stopDownload`.\n  contentLength: number;  // The total size in bytes of the download resource\n  bytesWritten: number;   // The number of bytes written to the file so far\n};\n\ntype DownloadResult = {\n  jobId: number;          // The download job ID, required if one wishes to cancel the download. See `stopDownload`.\n  statusCode: number;     // The HTTP status code\n  bytesWritten: number;   // The number of bytes written to the file\n};\n\ntype UploadFileOptions = {\n  toUrl: string;            // URL to upload file to\n  binaryStreamOnly?: boolean; // Allow for binary data stream for file to be uploaded without extra headers, Default is 'false'\n  files: UploadFileItem[];  // An array of objects with the file information to be uploaded.\n  headers?: Headers;        // An object of headers to be passed to the server\n  fields?: Fields;          // An object of fields to be passed to the server\n  method?: string;          // Default is 'POST', supports 'POST' and 'PUT'\n  beginCallback?: (res: UploadBeginCallbackResult) => void; // deprecated\n  progressCallback?: (res: UploadProgressCallbackResult) => void; // deprecated\n  begin?: (res: UploadBeginCallbackResult) => void;\n  progress?: (res: UploadProgressCallbackResult) => void;\n};\n\ntype UploadFileItem = {\n  name: string;       // Name of the file, if not defined then filename is used\n  filename: string;   // Name of file\n  filepath: string;   // Path to file\n  filetype: string;   // The mimetype of the file to be uploaded, if not defined it will get mimetype from `filepath` extension\n};\n\ntype UploadBeginCallbackResult = {\n  jobId: number;        // The upload job ID, required if one wishes to cancel the upload. See `stopUpload`.\n};\n\ntype UploadProgressCallbackResult = {\n  jobId: number;                      // The upload job ID, required if one wishes to cancel the upload. See `stopUpload`.\n  totalBytesExpectedToSend: number;   // The total number of bytes that will be sent to the server\n  totalBytesSent: number;             // The number of bytes sent to the server\n};\n\ntype UploadResult = {\n  jobId: number;        // The upload job ID, required if one wishes to cancel the upload. See `stopUpload`.\n  statusCode: number;   // The HTTP status code\n  headers: Headers;     // The HTTP response headers from the server\n  body: string;         // The HTTP response body\n};\n\ntype FSInfoResult = {\n  totalSpace: number;   // The total amount of storage space on the device (in bytes).\n  freeSpace: number;    // The amount of available storage space on the device (in bytes).\n};\n\n/**\n * Generic function used by readFile and readFileAssets\n */\nfunction readFileGeneric(filepath: string, command: Function, encodingOrOptions?: string) {\n  var options = {\n    encoding: 'utf8'\n  };\n\n  if (encodingOrOptions) {\n    if (typeof encodingOrOptions === 'string') {\n      options.encoding = encodingOrOptions;\n    } else if (typeof encodingOrOptions === 'object') {\n      options = encodingOrOptions;\n    }\n  }\n\n  return command(normalizeFilePath(filepath)).then((b64) => {\n    var contents;\n\n    if (options.encoding === 'utf8') {\n      contents = utf8.decode(base64.decode(b64));\n    } else if (options.encoding === 'ascii') {\n      contents = base64.decode(b64);\n    } else if (options.encoding === 'base64') {\n      contents = b64;\n    } else {\n      throw new Error('Invalid encoding type \"' + String(options.encoding) + '\"');\n    }\n\n    return contents;\n  });\n}\n\n/**\n * Generic function used by readDir and readDirAssets\n */\nfunction readDirGeneric(dirpath: string, command: Function) {\n  return command(normalizeFilePath(dirpath)).then(files => {\n    return files.map(file => ({\n      ctime: file.ctime && new Date(file.ctime * 1000) || null,\n      mtime: file.mtime && new Date(file.mtime * 1000) || null,\n      name: file.name,\n      path: file.path,\n      size: file.size,\n      isFile: () => file.type === RNFSFileTypeRegular,\n      isDirectory: () => file.type === RNFSFileTypeDirectory,\n    }));\n  });\n}\n\nvar RNFS = {\n\n  mkdir(filepath: string, options: MkdirOptions = {}): Promise<void> {\n    return RNFSManager.mkdir(normalizeFilePath(filepath), options).then(() => void 0);\n  },\n\n  moveFile(filepath: string, destPath: string, options: FileOptions = {}): Promise<void> {\n    return RNFSManager.moveFile(normalizeFilePath(filepath), normalizeFilePath(destPath), options).then(() => void 0);\n  },\n\n  copyFile(filepath: string, destPath: string, options: FileOptions = {}): Promise<void> {\n    return RNFSManager.copyFile(normalizeFilePath(filepath), normalizeFilePath(destPath), options).then(() => void 0);\n  },\n\n  pathForBundle(bundleNamed: string): Promise<string> {\n    return RNFSManager.pathForBundle(bundleNamed);\n  },\n\n  pathForGroup(groupName: string): Promise<string> {\n    return RNFSManager.pathForGroup(groupName);\n  },\n\n  getFSInfo(): Promise<FSInfoResult> {\n    return RNFSManager.getFSInfo();\n  },\n\n  getAllExternalFilesDirs(): Promise<string> {\n    return RNFSManager.getAllExternalFilesDirs();\n  },\n\n  unlink(filepath: string): Promise<void> {\n    return RNFSManager.unlink(normalizeFilePath(filepath)).then(() => void 0);\n  },\n\n  exists(filepath: string): Promise<boolean> {\n    return RNFSManager.exists(normalizeFilePath(filepath));\n  },\n\n  stopDownload(jobId: number): void {\n    RNFSManager.stopDownload(jobId);\n  },\n\n  resumeDownload(jobId: number): void {\n    RNFSManager.resumeDownload(jobId);\n  },\n\n  isResumable(jobId: number): Promise<boolean> {\n    return RNFSManager.isResumable(jobId);\n  },\n\n  stopUpload(jobId: number): void {\n    RNFSManager.stopUpload(jobId);\n  },\n\n  completeHandlerIOS(jobId: number): void {\n    return RNFSManager.completeHandlerIOS(jobId);\n  },\n\n  readDir(dirpath: string): Promise<ReadDirItem[]> {\n    return readDirGeneric(dirpath, RNFSManager.readDir);\n  },\n\n  // Android-only\n  readDirAssets(dirpath: string): Promise<ReadDirItem[]> {\n    if (!RNFSManager.readDirAssets) {\n      throw new Error('readDirAssets is not available on this platform');\n    }\n    return readDirGeneric(dirpath, RNFSManager.readDirAssets);\n  },\n\n  // Android-only\n  existsAssets(filepath: string) {\n    if (!RNFSManager.existsAssets) {\n      throw new Error('existsAssets is not available on this platform');\n    }\n    return RNFSManager.existsAssets(filepath);\n  },\n\n  // Android-only\n  existsRes(filename: string) {\n    if (!RNFSManager.existsRes) {\n      throw new Error('existsRes is not available on this platform');\n    }\n    return RNFSManager.existsRes(filename);\n  },\n\n  // Node style version (lowercase d). Returns just the names\n  readdir(dirpath: string): Promise<string[]> {\n    return RNFS.readDir(normalizeFilePath(dirpath)).then(files => {\n      return files.map(file => file.name);\n    });\n  },\n\n  // setReadable for Android\n  setReadable(filepath: string, readable: boolean, ownerOnly: boolean): Promise<boolean> {\n    return RNFSManager.setReadable(filepath, readable, ownerOnly).then((result) => {\n      return result;\n    })\n  },\n\n  stat(filepath: string): Promise<StatResult> {\n    return RNFSManager.stat(normalizeFilePath(filepath)).then((result) => {\n      return {\n        'path': filepath,\n        'ctime': new Date(result.ctime * 1000),\n        'mtime': new Date(result.mtime * 1000),\n        'size': result.size,\n        'mode': result.mode,\n        'originalFilepath': result.originalFilepath,\n        isFile: () => result.type === RNFSFileTypeRegular,\n        isDirectory: () => result.type === RNFSFileTypeDirectory,\n      };\n    });\n  },\n\n  readFile(filepath: string, encodingOrOptions?: any): Promise<string> {\n    return readFileGeneric(filepath, RNFSManager.readFile, encodingOrOptions);\n  },\n\n  read(filepath: string, length: number = 0, position: number = 0, encodingOrOptions?: any): Promise<string> {\n    var options = {\n      encoding: 'utf8'\n    };\n\n    if (encodingOrOptions) {\n      if (typeof encodingOrOptions === 'string') {\n        options.encoding = encodingOrOptions;\n      } else if (typeof encodingOrOptions === 'object') {\n        options = encodingOrOptions;\n      }\n    }\n\n    return RNFSManager.read(normalizeFilePath(filepath), length, position).then((b64) => {\n      var contents;\n\n      if (options.encoding === 'utf8') {\n        contents = utf8.decode(base64.decode(b64));\n      } else if (options.encoding === 'ascii') {\n        contents = base64.decode(b64);\n      } else if (options.encoding === 'base64') {\n        contents = b64;\n      } else {\n        throw new Error('Invalid encoding type \"' + String(options.encoding) + '\"');\n      }\n\n      return contents;\n    });\n  },\n\n  // Android only\n  readFileAssets(filepath: string, encodingOrOptions?: any): Promise<string> {\n    if (!RNFSManager.readFileAssets) {\n      throw new Error('readFileAssets is not available on this platform');\n    }\n    return readFileGeneric(filepath, RNFSManager.readFileAssets, encodingOrOptions);\n  },\n\n  // Android only\n  readFileRes(filename: string, encodingOrOptions?: any): Promise<string> {\n    if (!RNFSManager.readFileRes) {\n      throw new Error('readFileRes is not available on this platform');\n    }\n    return readFileGeneric(filename, RNFSManager.readFileRes, encodingOrOptions);\n  },\n\n  hash(filepath: string, algorithm: string): Promise<string> {\n    return RNFSManager.hash(normalizeFilePath(filepath), algorithm);\n  },\n\n  // Android only\n  copyFileAssets(filepath: string, destPath: string) {\n    if (!RNFSManager.copyFileAssets) {\n      throw new Error('copyFileAssets is not available on this platform');\n    }\n    return RNFSManager.copyFileAssets(normalizeFilePath(filepath), normalizeFilePath(destPath)).then(() => void 0);\n  },\n\n  // Android only\n  copyFileRes(filename: string, destPath: string) {\n    if (!RNFSManager.copyFileRes) {\n      throw new Error('copyFileRes is not available on this platform');\n    }\n    return RNFSManager.copyFileRes(filename, normalizeFilePath(destPath)).then(() => void 0);\n  },\n\n  // iOS only\n  // Copies fotos from asset-library (camera-roll) to a specific location\n  // with a given width or height\n  // @see: https://developer.apple.com/reference/photos/phimagemanager/1616964-requestimageforasset\n  copyAssetsFileIOS(imageUri: string, destPath: string, width: number, height: number,\n    scale: number = 1.0, compression: number = 1.0, resizeMode: string = 'contain'): Promise<string> {\n    return RNFSManager.copyAssetsFileIOS(imageUri, destPath, width, height, scale, compression, resizeMode);\n  },\n\n  // iOS only\n  // Copies fotos from asset-library (camera-roll) to a specific location\n  // with a given width or height\n  // @see: https://developer.apple.com/reference/photos/phimagemanager/1616964-requestimageforasset\n  copyAssetsVideoIOS(imageUri: string, destPath: string): Promise<string> {\n    return RNFSManager.copyAssetsVideoIOS(imageUri, destPath);\n  },\n\n  writeFile(filepath: string, contents: string, encodingOrOptions?: any): Promise<void> {\n    var b64;\n\n    var options = {\n      encoding: 'utf8'\n    };\n\n    if (encodingOrOptions) {\n      if (typeof encodingOrOptions === 'string') {\n        options.encoding = encodingOrOptions;\n      } else if (typeof encodingOrOptions === 'object') {\n        options = {\n          ...options,\n          ...encodingOrOptions\n        };\n      }\n    }\n\n    if (options.encoding === 'utf8') {\n      b64 = base64.encode(utf8.encode(contents));\n    } else if (options.encoding === 'ascii') {\n      b64 = base64.encode(contents);\n    } else if (options.encoding === 'base64') {\n      b64 = contents;\n    } else {\n      throw new Error('Invalid encoding type \"' + options.encoding + '\"');\n    }\n\n    return RNFSManager.writeFile(normalizeFilePath(filepath), b64, options).then(() => void 0);\n  },\n\n  appendFile(filepath: string, contents: string, encodingOrOptions?: any): Promise<void> {\n    var b64;\n\n    var options = {\n      encoding: 'utf8'\n    };\n\n    if (encodingOrOptions) {\n      if (typeof encodingOrOptions === 'string') {\n        options.encoding = encodingOrOptions;\n      } else if (typeof encodingOrOptions === 'object') {\n        options = encodingOrOptions;\n      }\n    }\n\n    if (options.encoding === 'utf8') {\n      b64 = base64.encode(utf8.encode(contents));\n    } else if (options.encoding === 'ascii') {\n      b64 = base64.encode(contents);\n    } else if (options.encoding === 'base64') {\n      b64 = contents;\n    } else {\n      throw new Error('Invalid encoding type \"' + options.encoding + '\"');\n    }\n\n    return RNFSManager.appendFile(normalizeFilePath(filepath), b64);\n  },\n\n  write(filepath: string, contents: string, position?: number, encodingOrOptions?: any): Promise<void> {\n    var b64;\n\n    var options = {\n      encoding: 'utf8'\n    };\n\n    if (encodingOrOptions) {\n      if (typeof encodingOrOptions === 'string') {\n        options.encoding = encodingOrOptions;\n      } else if (typeof encodingOrOptions === 'object') {\n        options = encodingOrOptions;\n      }\n    }\n\n    if (options.encoding === 'utf8') {\n      b64 = base64.encode(utf8.encode(contents));\n    } else if (options.encoding === 'ascii') {\n      b64 = base64.encode(contents);\n    } else if (options.encoding === 'base64') {\n      b64 = contents;\n    } else {\n      throw new Error('Invalid encoding type \"' + options.encoding + '\"');\n    }\n\n    if (position === undefined) {\n      position = -1;\n    }\n\n    return RNFSManager.write(normalizeFilePath(filepath), b64, position).then(() => void 0);\n  },\n\n  downloadFile(options: DownloadFileOptions): { jobId: number, promise: Promise<DownloadResult> } {\n    if (typeof options !== 'object') throw new Error('downloadFile: Invalid value for argument `options`');\n    if (typeof options.fromUrl !== 'string') throw new Error('downloadFile: Invalid value for property `fromUrl`');\n    if (typeof options.toFile !== 'string') throw new Error('downloadFile: Invalid value for property `toFile`');\n    if (options.headers && typeof options.headers !== 'object') throw new Error('downloadFile: Invalid value for property `headers`');\n    if (options.background && typeof options.background !== 'boolean') throw new Error('downloadFile: Invalid value for property `background`');\n    if (options.progressDivider && typeof options.progressDivider !== 'number') throw new Error('downloadFile: Invalid value for property `progressDivider`');\n    if (options.progressInterval && typeof options.progressInterval !== 'number') throw new Error('downloadFile: Invalid value for property `progressInterval`');\n    if (options.readTimeout && typeof options.readTimeout !== 'number') throw new Error('downloadFile: Invalid value for property `readTimeout`');\n    if (options.connectionTimeout && typeof options.connectionTimeout !== 'number') throw new Error('downloadFile: Invalid value for property `connectionTimeout`');\n    if (options.backgroundTimeout && typeof options.backgroundTimeout !== 'number') throw new Error('downloadFile: Invalid value for property `backgroundTimeout`');\n\n    var jobId = getJobId();\n    var subscriptions = [];\n\n    if (options.begin) {\n      subscriptions.push(RNFS_NativeEventEmitter.addListener('DownloadBegin', (res) => {\n        if (res.jobId === jobId) options.begin(res);\n      }));\n    }\n\n    if (options.progress) {\n      subscriptions.push(RNFS_NativeEventEmitter.addListener('DownloadProgress', (res) => {\n        if (res.jobId === jobId) options.progress(res);\n      }));\n    }\n\n    if (options.resumable) {\n      subscriptions.push(RNFS_NativeEventEmitter.addListener('DownloadResumable', (res) => {\n        if (res.jobId === jobId) options.resumable();\n      }));\n    }\n\n    var bridgeOptions = {\n      jobId: jobId,\n      fromUrl: options.fromUrl,\n      toFile: normalizeFilePath(options.toFile),\n      headers: options.headers || {},\n      background: !!options.background,\n      progressDivider: options.progressDivider || 0,\n      progressInterval: options.progressInterval || 0,\n      readTimeout: options.readTimeout || 15000,\n      connectionTimeout: options.connectionTimeout || 5000,\n      backgroundTimeout: options.backgroundTimeout || 3600000, // 1 hour\n      hasBeginCallback: options.begin instanceof Function,\n      hasProgressCallback: options.progress instanceof Function,\n      hasResumableCallback: options.resumable instanceof Function,\n    };\n\n    return {\n      jobId,\n      promise: RNFSManager.downloadFile(bridgeOptions).then(res => {\n        subscriptions.forEach(sub => sub.remove());\n        return res;\n      })\n        .catch(e => {\n          return Promise.reject(e);\n        })\n    };\n  },\n\n  uploadFiles(options: UploadFileOptions): { jobId: number, promise: Promise<UploadResult> } {\n    if (!RNFSManager.uploadFiles) {\n      return {\n        jobId: -1,\n        promise: Promise.reject(new Error('`uploadFiles` is unsupported on this platform'))\n      };\n    }\n\n    var jobId = getJobId();\n    var subscriptions = [];\n\n    if (typeof options !== 'object') throw new Error('uploadFiles: Invalid value for argument `options`');\n    if (typeof options.toUrl !== 'string') throw new Error('uploadFiles: Invalid value for property `toUrl`');\n    if (!Array.isArray(options.files)) throw new Error('uploadFiles: Invalid value for property `files`');\n    if (options.headers && typeof options.headers !== 'object') throw new Error('uploadFiles: Invalid value for property `headers`');\n    if (options.fields && typeof options.fields !== 'object') throw new Error('uploadFiles: Invalid value for property `fields`');\n    if (options.method && typeof options.method !== 'string') throw new Error('uploadFiles: Invalid value for property `method`');\n\n    if (options.begin) {\n      subscriptions.push(RNFS_NativeEventEmitter.addListener('UploadBegin', options.begin));\n    } else if (options.beginCallback) {\n      // Deprecated\n      subscriptions.push(RNFS_NativeEventEmitter.addListener('UploadBegin', options.beginCallback));\n    }\n\n    if (options.progress) {\n      subscriptions.push(RNFS_NativeEventEmitter.addListener('UploadProgress', options.progress));\n    } else if (options.progressCallback) {\n      // Deprecated\n      subscriptions.push(RNFS_NativeEventEmitter.addListener('UploadProgress', options.progressCallback));\n    }\n\n    var bridgeOptions = {\n      jobId: jobId,\n      toUrl: options.toUrl,\n      files: options.files,\n      binaryStreamOnly: options.binaryStreamOnly || false,\n      headers: options.headers || {},\n      fields: options.fields || {},\n      method: options.method || 'POST',\n      hasBeginCallback: options.begin instanceof Function || options.beginCallback instanceof Function,\n      hasProgressCallback: options.progress instanceof Function || options.progressCallback instanceof Function,\n    };\n\n    return {\n      jobId,\n      promise: RNFSManager.uploadFiles(bridgeOptions).then(res => {\n        subscriptions.forEach(sub => sub.remove());\n        return res;\n      })\n    };\n  },\n\n  touch(filepath: string, mtime?: Date, ctime?: Date): Promise<void> {\n    if (ctime && !(ctime instanceof Date)) throw new Error('touch: Invalid value for argument `ctime`');\n    if (mtime && !(mtime instanceof Date)) throw new Error('touch: Invalid value for argument `mtime`');\n    var ctimeTime = 0;\n    if (isIOS) {\n      ctimeTime = ctime && ctime.getTime();\n    }\n    return RNFSManager.touch(\n      normalizeFilePath(filepath),\n      mtime && mtime.getTime(),\n      ctimeTime\n    );\n  },\n\n  scanFile(path: string): Promise<ReadDirItem[]> {\n    return RNFSManager.scanFile(path);\n  },\n\n  MainBundlePath: RNFSManager.RNFSMainBundlePath,\n  CachesDirectoryPath: RNFSManager.RNFSCachesDirectoryPath,\n  ExternalCachesDirectoryPath: RNFSManager.RNFSExternalCachesDirectoryPath,\n  DocumentDirectoryPath: RNFSManager.RNFSDocumentDirectoryPath,\n  DownloadDirectoryPath: RNFSManager.RNFSDownloadDirectoryPath,\n  ExternalDirectoryPath: RNFSManager.RNFSExternalDirectoryPath,\n  ExternalStorageDirectoryPath: RNFSManager.RNFSExternalStorageDirectoryPath,\n  TemporaryDirectoryPath: RNFSManager.RNFSTemporaryDirectoryPath,\n  LibraryDirectoryPath: RNFSManager.RNFSLibraryDirectoryPath,\n  PicturesDirectoryPath: RNFSManager.RNFSPicturesDirectoryPath,\n  FileProtectionKeys: RNFSManager.RNFSFileProtectionKeys\n};\n\nmodule.exports = RNFS;\n"],"names":["RN","utf8","base64"],"mappings":"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"}