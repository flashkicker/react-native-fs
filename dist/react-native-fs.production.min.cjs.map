{"version":3,"file":"react-native-fs.production.min.cjs","sources":["../src/index.ts"],"sourcesContent":["/**\n * React Native FS\n * @flow\n */\n// This file supports both iOS and Android\n\nimport RN from 'react-native';\nimport base64 from 'base-64';\nimport utf8 from 'utf8';\n\nvar RNFSManager = RN.NativeModules.RNFSManager;\nvar NativeEventEmitter = RN.NativeEventEmitter;\nvar RNFS_NativeEventEmitter = new NativeEventEmitter(RNFSManager);\nvar RNFSFileTypeRegular = RNFSManager.RNFSFileTypeRegular;\nvar RNFSFileTypeDirectory = RNFSManager.RNFSFileTypeDirectory;\n\nvar isIOS = RN.Platform.OS === 'ios';\nvar jobId = 0;\n\nvar getJobId = () => {\n  jobId += 1;\n  return jobId;\n};\n\nvar normalizeFilePath = (path: string) => (path.startsWith('file://') ? path.slice(7) : path);\n\ntype MkdirOptions = {\n  NSURLIsExcludedFromBackupKey?: boolean; // iOS only\n  NSFileProtectionKey?: string; // IOS only\n};\n\ntype FileOptions = {\n  NSFileProtectionKey?: string; // IOS only\n};\n\ntype ReadDirItem = {\n  ctime?: Date;    // The creation date of the file (iOS only)\n  mtime?: Date;    // The last modified date of the file\n  name: string;     // The name of the item\n  path: string;     // The absolute path to the item\n  size: string;     // Size in bytes\n  isFile: () => boolean;        // Is the file just a file?\n  isDirectory: () => boolean;   // Is the file a directory?\n};\n\ntype StatResult = {\n  name?: string;     // The name of the item TODO: why is this not documented?\n  path: string;     // The absolute path to the item\n  size: string;     // Size in bytes\n  mode: number;     // UNIX file mode\n  ctime: number;    // Created date\n  mtime: number;    // Last modified date\n  originalFilepath: string;    // In case of content uri this is the pointed file path, otherwise is the same as path\n  isFile: () => boolean;        // Is the file just a file?\n  isDirectory: () => boolean;   // Is the file a directory?\n};\n\ntype Headers = { [name: string]: string };\ntype Fields = { [name: string]: string };\n\ntype DownloadFileOptions = {\n  fromUrl: string;          // URL to download file from\n  toFile: string;           // Local filesystem path to save the file to\n  headers?: Headers;        // An object of headers to be passed to the server\n  background?: boolean;     // Continue the download in the background after the app terminates (iOS only)\n  discretionary?: boolean;  // Allow the OS to control the timing and speed of the download to improve perceived performance  (iOS only)\n  cacheable?: boolean;      // Whether the download can be stored in the shared NSURLCache (iOS only)\n  progressInterval?: number;\n  progressDivider?: number;\n  begin?: (res: DownloadBeginCallbackResult) => void;\n  progress?: (res: DownloadProgressCallbackResult) => void;\n  resumable?: () => void;    // only supported on iOS yet\n  connectionTimeout?: number; // only supported on Android yet\n  readTimeout?: number;       // supported on Android and iOS\n  backgroundTimeout?: number; // Maximum time (in milliseconds) to download an entire resource (iOS only, useful for timing out background downloads)\n};\n\ntype DownloadBeginCallbackResult = {\n  jobId: number;          // The download job ID, required if one wishes to cancel the download. See `stopDownload`.\n  statusCode: number;     // The HTTP status code\n  contentLength: number;  // The total size in bytes of the download resource\n  headers: Headers;       // The HTTP response headers from the server\n};\n\ntype DownloadProgressCallbackResult = {\n  jobId: number;          // The download job ID, required if one wishes to cancel the download. See `stopDownload`.\n  contentLength: number;  // The total size in bytes of the download resource\n  bytesWritten: number;   // The number of bytes written to the file so far\n};\n\ntype DownloadResult = {\n  jobId: number;          // The download job ID, required if one wishes to cancel the download. See `stopDownload`.\n  statusCode: number;     // The HTTP status code\n  bytesWritten: number;   // The number of bytes written to the file\n};\n\ntype UploadFileOptions = {\n  toUrl: string;            // URL to upload file to\n  binaryStreamOnly?: boolean; // Allow for binary data stream for file to be uploaded without extra headers, Default is 'false'\n  files: UploadFileItem[];  // An array of objects with the file information to be uploaded.\n  headers?: Headers;        // An object of headers to be passed to the server\n  fields?: Fields;          // An object of fields to be passed to the server\n  method?: string;          // Default is 'POST', supports 'POST' and 'PUT'\n  beginCallback?: (res: UploadBeginCallbackResult) => void; // deprecated\n  progressCallback?: (res: UploadProgressCallbackResult) => void; // deprecated\n  begin?: (res: UploadBeginCallbackResult) => void;\n  progress?: (res: UploadProgressCallbackResult) => void;\n};\n\ntype UploadFileItem = {\n  name: string;       // Name of the file, if not defined then filename is used\n  filename: string;   // Name of file\n  filepath: string;   // Path to file\n  filetype: string;   // The mimetype of the file to be uploaded, if not defined it will get mimetype from `filepath` extension\n};\n\ntype UploadBeginCallbackResult = {\n  jobId: number;        // The upload job ID, required if one wishes to cancel the upload. See `stopUpload`.\n};\n\ntype UploadProgressCallbackResult = {\n  jobId: number;                      // The upload job ID, required if one wishes to cancel the upload. See `stopUpload`.\n  totalBytesExpectedToSend: number;   // The total number of bytes that will be sent to the server\n  totalBytesSent: number;             // The number of bytes sent to the server\n};\n\ntype UploadResult = {\n  jobId: number;        // The upload job ID, required if one wishes to cancel the upload. See `stopUpload`.\n  statusCode: number;   // The HTTP status code\n  headers: Headers;     // The HTTP response headers from the server\n  body: string;         // The HTTP response body\n};\n\ntype FSInfoResult = {\n  totalSpace: number;   // The total amount of storage space on the device (in bytes).\n  freeSpace: number;    // The amount of available storage space on the device (in bytes).\n};\n\n/**\n * Generic function used by readFile and readFileAssets\n */\nfunction readFileGeneric(filepath: string, command: Function, encodingOrOptions?: string) {\n  var options = {\n    encoding: 'utf8'\n  };\n\n  if (encodingOrOptions) {\n    if (typeof encodingOrOptions === 'string') {\n      options.encoding = encodingOrOptions;\n    } else if (typeof encodingOrOptions === 'object') {\n      options = encodingOrOptions;\n    }\n  }\n\n  return command(normalizeFilePath(filepath)).then((b64) => {\n    var contents;\n\n    if (options.encoding === 'utf8') {\n      contents = utf8.decode(base64.decode(b64));\n    } else if (options.encoding === 'ascii') {\n      contents = base64.decode(b64);\n    } else if (options.encoding === 'base64') {\n      contents = b64;\n    } else {\n      throw new Error('Invalid encoding type \"' + String(options.encoding) + '\"');\n    }\n\n    return contents;\n  });\n}\n\n/**\n * Generic function used by readDir and readDirAssets\n */\nfunction readDirGeneric(dirpath: string, command: Function) {\n  return command(normalizeFilePath(dirpath)).then(files => {\n    return files.map(file => ({\n      ctime: file.ctime && new Date(file.ctime * 1000) || null,\n      mtime: file.mtime && new Date(file.mtime * 1000) || null,\n      name: file.name,\n      path: file.path,\n      size: file.size,\n      isFile: () => file.type === RNFSFileTypeRegular,\n      isDirectory: () => file.type === RNFSFileTypeDirectory,\n    }));\n  });\n}\n\nvar RNFS = {\n\n  mkdir(filepath: string, options: MkdirOptions = {}): Promise<void> {\n    return RNFSManager.mkdir(normalizeFilePath(filepath), options).then(() => void 0);\n  },\n\n  moveFile(filepath: string, destPath: string, options: FileOptions = {}): Promise<void> {\n    return RNFSManager.moveFile(normalizeFilePath(filepath), normalizeFilePath(destPath), options).then(() => void 0);\n  },\n\n  copyFile(filepath: string, destPath: string, options: FileOptions = {}): Promise<void> {\n    return RNFSManager.copyFile(normalizeFilePath(filepath), normalizeFilePath(destPath), options).then(() => void 0);\n  },\n\n  pathForBundle(bundleNamed: string): Promise<string> {\n    return RNFSManager.pathForBundle(bundleNamed);\n  },\n\n  pathForGroup(groupName: string): Promise<string> {\n    return RNFSManager.pathForGroup(groupName);\n  },\n\n  getFSInfo(): Promise<FSInfoResult> {\n    return RNFSManager.getFSInfo();\n  },\n\n  getAllExternalFilesDirs(): Promise<string> {\n    return RNFSManager.getAllExternalFilesDirs();\n  },\n\n  unlink(filepath: string): Promise<void> {\n    return RNFSManager.unlink(normalizeFilePath(filepath)).then(() => void 0);\n  },\n\n  exists(filepath: string): Promise<boolean> {\n    return RNFSManager.exists(normalizeFilePath(filepath));\n  },\n\n  stopDownload(jobId: number): void {\n    RNFSManager.stopDownload(jobId);\n  },\n\n  resumeDownload(jobId: number): void {\n    RNFSManager.resumeDownload(jobId);\n  },\n\n  isResumable(jobId: number): Promise<boolean> {\n    return RNFSManager.isResumable(jobId);\n  },\n\n  stopUpload(jobId: number): void {\n    RNFSManager.stopUpload(jobId);\n  },\n\n  completeHandlerIOS(jobId: number): void {\n    return RNFSManager.completeHandlerIOS(jobId);\n  },\n\n  readDir(dirpath: string): Promise<ReadDirItem[]> {\n    return readDirGeneric(dirpath, RNFSManager.readDir);\n  },\n\n  // Android-only\n  readDirAssets(dirpath: string): Promise<ReadDirItem[]> {\n    if (!RNFSManager.readDirAssets) {\n      throw new Error('readDirAssets is not available on this platform');\n    }\n    return readDirGeneric(dirpath, RNFSManager.readDirAssets);\n  },\n\n  // Android-only\n  existsAssets(filepath: string) {\n    if (!RNFSManager.existsAssets) {\n      throw new Error('existsAssets is not available on this platform');\n    }\n    return RNFSManager.existsAssets(filepath);\n  },\n\n  // Android-only\n  existsRes(filename: string) {\n    if (!RNFSManager.existsRes) {\n      throw new Error('existsRes is not available on this platform');\n    }\n    return RNFSManager.existsRes(filename);\n  },\n\n  // Node style version (lowercase d). Returns just the names\n  readdir(dirpath: string): Promise<string[]> {\n    return RNFS.readDir(normalizeFilePath(dirpath)).then(files => {\n      return files.map(file => file.name);\n    });\n  },\n\n  // setReadable for Android\n  setReadable(filepath: string, readable: boolean, ownerOnly: boolean): Promise<boolean> {\n    return RNFSManager.setReadable(filepath, readable, ownerOnly).then((result) => {\n      return result;\n    })\n  },\n\n  stat(filepath: string): Promise<StatResult> {\n    return RNFSManager.stat(normalizeFilePath(filepath)).then((result) => {\n      return {\n        'path': filepath,\n        'ctime': new Date(result.ctime * 1000),\n        'mtime': new Date(result.mtime * 1000),\n        'size': result.size,\n        'mode': result.mode,\n        'originalFilepath': result.originalFilepath,\n        isFile: () => result.type === RNFSFileTypeRegular,\n        isDirectory: () => result.type === RNFSFileTypeDirectory,\n      };\n    });\n  },\n\n  readFile(filepath: string, encodingOrOptions?: any): Promise<string> {\n    return readFileGeneric(filepath, RNFSManager.readFile, encodingOrOptions);\n  },\n\n  read(filepath: string, length: number = 0, position: number = 0, encodingOrOptions?: any): Promise<string> {\n    var options = {\n      encoding: 'utf8'\n    };\n\n    if (encodingOrOptions) {\n      if (typeof encodingOrOptions === 'string') {\n        options.encoding = encodingOrOptions;\n      } else if (typeof encodingOrOptions === 'object') {\n        options = encodingOrOptions;\n      }\n    }\n\n    return RNFSManager.read(normalizeFilePath(filepath), length, position).then((b64) => {\n      var contents;\n\n      if (options.encoding === 'utf8') {\n        contents = utf8.decode(base64.decode(b64));\n      } else if (options.encoding === 'ascii') {\n        contents = base64.decode(b64);\n      } else if (options.encoding === 'base64') {\n        contents = b64;\n      } else {\n        throw new Error('Invalid encoding type \"' + String(options.encoding) + '\"');\n      }\n\n      return contents;\n    });\n  },\n\n  // Android only\n  readFileAssets(filepath: string, encodingOrOptions?: any): Promise<string> {\n    if (!RNFSManager.readFileAssets) {\n      throw new Error('readFileAssets is not available on this platform');\n    }\n    return readFileGeneric(filepath, RNFSManager.readFileAssets, encodingOrOptions);\n  },\n\n  // Android only\n  readFileRes(filename: string, encodingOrOptions?: any): Promise<string> {\n    if (!RNFSManager.readFileRes) {\n      throw new Error('readFileRes is not available on this platform');\n    }\n    return readFileGeneric(filename, RNFSManager.readFileRes, encodingOrOptions);\n  },\n\n  hash(filepath: string, algorithm: string): Promise<string> {\n    return RNFSManager.hash(normalizeFilePath(filepath), algorithm);\n  },\n\n  // Android only\n  copyFileAssets(filepath: string, destPath: string) {\n    if (!RNFSManager.copyFileAssets) {\n      throw new Error('copyFileAssets is not available on this platform');\n    }\n    return RNFSManager.copyFileAssets(normalizeFilePath(filepath), normalizeFilePath(destPath)).then(() => void 0);\n  },\n\n  // Android only\n  copyFileRes(filename: string, destPath: string) {\n    if (!RNFSManager.copyFileRes) {\n      throw new Error('copyFileRes is not available on this platform');\n    }\n    return RNFSManager.copyFileRes(filename, normalizeFilePath(destPath)).then(() => void 0);\n  },\n\n  // iOS only\n  // Copies fotos from asset-library (camera-roll) to a specific location\n  // with a given width or height\n  // @see: https://developer.apple.com/reference/photos/phimagemanager/1616964-requestimageforasset\n  copyAssetsFileIOS(imageUri: string, destPath: string, width: number, height: number,\n    scale: number = 1.0, compression: number = 1.0, resizeMode: string = 'contain'): Promise<string> {\n    return RNFSManager.copyAssetsFileIOS(imageUri, destPath, width, height, scale, compression, resizeMode);\n  },\n\n  // iOS only\n  // Copies fotos from asset-library (camera-roll) to a specific location\n  // with a given width or height\n  // @see: https://developer.apple.com/reference/photos/phimagemanager/1616964-requestimageforasset\n  copyAssetsVideoIOS(imageUri: string, destPath: string): Promise<string> {\n    return RNFSManager.copyAssetsVideoIOS(imageUri, destPath);\n  },\n\n  writeFile(filepath: string, contents: string, encodingOrOptions?: any): Promise<void> {\n    var b64;\n\n    var options = {\n      encoding: 'utf8'\n    };\n\n    if (encodingOrOptions) {\n      if (typeof encodingOrOptions === 'string') {\n        options.encoding = encodingOrOptions;\n      } else if (typeof encodingOrOptions === 'object') {\n        options = {\n          ...options,\n          ...encodingOrOptions\n        };\n      }\n    }\n\n    if (options.encoding === 'utf8') {\n      b64 = base64.encode(utf8.encode(contents));\n    } else if (options.encoding === 'ascii') {\n      b64 = base64.encode(contents);\n    } else if (options.encoding === 'base64') {\n      b64 = contents;\n    } else {\n      throw new Error('Invalid encoding type \"' + options.encoding + '\"');\n    }\n\n    return RNFSManager.writeFile(normalizeFilePath(filepath), b64, options).then(() => void 0);\n  },\n\n  appendFile(filepath: string, contents: string, encodingOrOptions?: any): Promise<void> {\n    var b64;\n\n    var options = {\n      encoding: 'utf8'\n    };\n\n    if (encodingOrOptions) {\n      if (typeof encodingOrOptions === 'string') {\n        options.encoding = encodingOrOptions;\n      } else if (typeof encodingOrOptions === 'object') {\n        options = encodingOrOptions;\n      }\n    }\n\n    if (options.encoding === 'utf8') {\n      b64 = base64.encode(utf8.encode(contents));\n    } else if (options.encoding === 'ascii') {\n      b64 = base64.encode(contents);\n    } else if (options.encoding === 'base64') {\n      b64 = contents;\n    } else {\n      throw new Error('Invalid encoding type \"' + options.encoding + '\"');\n    }\n\n    return RNFSManager.appendFile(normalizeFilePath(filepath), b64);\n  },\n\n  write(filepath: string, contents: string, position?: number, encodingOrOptions?: any): Promise<void> {\n    var b64;\n\n    var options = {\n      encoding: 'utf8'\n    };\n\n    if (encodingOrOptions) {\n      if (typeof encodingOrOptions === 'string') {\n        options.encoding = encodingOrOptions;\n      } else if (typeof encodingOrOptions === 'object') {\n        options = encodingOrOptions;\n      }\n    }\n\n    if (options.encoding === 'utf8') {\n      b64 = base64.encode(utf8.encode(contents));\n    } else if (options.encoding === 'ascii') {\n      b64 = base64.encode(contents);\n    } else if (options.encoding === 'base64') {\n      b64 = contents;\n    } else {\n      throw new Error('Invalid encoding type \"' + options.encoding + '\"');\n    }\n\n    if (position === undefined) {\n      position = -1;\n    }\n\n    return RNFSManager.write(normalizeFilePath(filepath), b64, position).then(() => void 0);\n  },\n\n  downloadFile(options: DownloadFileOptions): { jobId: number, promise: Promise<DownloadResult> } {\n    if (typeof options !== 'object') throw new Error('downloadFile: Invalid value for argument `options`');\n    if (typeof options.fromUrl !== 'string') throw new Error('downloadFile: Invalid value for property `fromUrl`');\n    if (typeof options.toFile !== 'string') throw new Error('downloadFile: Invalid value for property `toFile`');\n    if (options.headers && typeof options.headers !== 'object') throw new Error('downloadFile: Invalid value for property `headers`');\n    if (options.background && typeof options.background !== 'boolean') throw new Error('downloadFile: Invalid value for property `background`');\n    if (options.progressDivider && typeof options.progressDivider !== 'number') throw new Error('downloadFile: Invalid value for property `progressDivider`');\n    if (options.progressInterval && typeof options.progressInterval !== 'number') throw new Error('downloadFile: Invalid value for property `progressInterval`');\n    if (options.readTimeout && typeof options.readTimeout !== 'number') throw new Error('downloadFile: Invalid value for property `readTimeout`');\n    if (options.connectionTimeout && typeof options.connectionTimeout !== 'number') throw new Error('downloadFile: Invalid value for property `connectionTimeout`');\n    if (options.backgroundTimeout && typeof options.backgroundTimeout !== 'number') throw new Error('downloadFile: Invalid value for property `backgroundTimeout`');\n\n    var jobId = getJobId();\n    var subscriptions = [];\n\n    if (options.begin) {\n      subscriptions.push(RNFS_NativeEventEmitter.addListener('DownloadBegin', (res) => {\n        if (res.jobId === jobId) options.begin(res);\n      }));\n    }\n\n    if (options.progress) {\n      subscriptions.push(RNFS_NativeEventEmitter.addListener('DownloadProgress', (res) => {\n        if (res.jobId === jobId) options.progress(res);\n      }));\n    }\n\n    if (options.resumable) {\n      subscriptions.push(RNFS_NativeEventEmitter.addListener('DownloadResumable', (res) => {\n        if (res.jobId === jobId) options.resumable();\n      }));\n    }\n\n    var bridgeOptions = {\n      jobId: jobId,\n      fromUrl: options.fromUrl,\n      toFile: normalizeFilePath(options.toFile),\n      headers: options.headers || {},\n      background: !!options.background,\n      progressDivider: options.progressDivider || 0,\n      progressInterval: options.progressInterval || 0,\n      readTimeout: options.readTimeout || 15000,\n      connectionTimeout: options.connectionTimeout || 5000,\n      backgroundTimeout: options.backgroundTimeout || 3600000, // 1 hour\n      hasBeginCallback: options.begin instanceof Function,\n      hasProgressCallback: options.progress instanceof Function,\n      hasResumableCallback: options.resumable instanceof Function,\n    };\n\n    return {\n      jobId,\n      promise: RNFSManager.downloadFile(bridgeOptions).then(res => {\n        subscriptions.forEach(sub => sub.remove());\n        return res;\n      })\n        .catch(e => {\n          return Promise.reject(e);\n        })\n    };\n  },\n\n  uploadFiles(options: UploadFileOptions): { jobId: number, promise: Promise<UploadResult> } {\n    if (!RNFSManager.uploadFiles) {\n      return {\n        jobId: -1,\n        promise: Promise.reject(new Error('`uploadFiles` is unsupported on this platform'))\n      };\n    }\n\n    var jobId = getJobId();\n    var subscriptions = [];\n\n    if (typeof options !== 'object') throw new Error('uploadFiles: Invalid value for argument `options`');\n    if (typeof options.toUrl !== 'string') throw new Error('uploadFiles: Invalid value for property `toUrl`');\n    if (!Array.isArray(options.files)) throw new Error('uploadFiles: Invalid value for property `files`');\n    if (options.headers && typeof options.headers !== 'object') throw new Error('uploadFiles: Invalid value for property `headers`');\n    if (options.fields && typeof options.fields !== 'object') throw new Error('uploadFiles: Invalid value for property `fields`');\n    if (options.method && typeof options.method !== 'string') throw new Error('uploadFiles: Invalid value for property `method`');\n\n    if (options.begin) {\n      subscriptions.push(RNFS_NativeEventEmitter.addListener('UploadBegin', options.begin));\n    } else if (options.beginCallback) {\n      // Deprecated\n      subscriptions.push(RNFS_NativeEventEmitter.addListener('UploadBegin', options.beginCallback));\n    }\n\n    if (options.progress) {\n      subscriptions.push(RNFS_NativeEventEmitter.addListener('UploadProgress', options.progress));\n    } else if (options.progressCallback) {\n      // Deprecated\n      subscriptions.push(RNFS_NativeEventEmitter.addListener('UploadProgress', options.progressCallback));\n    }\n\n    var bridgeOptions = {\n      jobId: jobId,\n      toUrl: options.toUrl,\n      files: options.files,\n      binaryStreamOnly: options.binaryStreamOnly || false,\n      headers: options.headers || {},\n      fields: options.fields || {},\n      method: options.method || 'POST',\n      hasBeginCallback: options.begin instanceof Function || options.beginCallback instanceof Function,\n      hasProgressCallback: options.progress instanceof Function || options.progressCallback instanceof Function,\n    };\n\n    return {\n      jobId,\n      promise: RNFSManager.uploadFiles(bridgeOptions).then(res => {\n        subscriptions.forEach(sub => sub.remove());\n        return res;\n      })\n    };\n  },\n\n  touch(filepath: string, mtime?: Date, ctime?: Date): Promise<void> {\n    if (ctime && !(ctime instanceof Date)) throw new Error('touch: Invalid value for argument `ctime`');\n    if (mtime && !(mtime instanceof Date)) throw new Error('touch: Invalid value for argument `mtime`');\n    var ctimeTime = 0;\n    if (isIOS) {\n      ctimeTime = ctime && ctime.getTime();\n    }\n    return RNFSManager.touch(\n      normalizeFilePath(filepath),\n      mtime && mtime.getTime(),\n      ctimeTime\n    );\n  },\n\n  scanFile(path: string): Promise<ReadDirItem[]> {\n    return RNFSManager.scanFile(path);\n  },\n\n  MainBundlePath: RNFSManager.RNFSMainBundlePath,\n  CachesDirectoryPath: RNFSManager.RNFSCachesDirectoryPath,\n  ExternalCachesDirectoryPath: RNFSManager.RNFSExternalCachesDirectoryPath,\n  DocumentDirectoryPath: RNFSManager.RNFSDocumentDirectoryPath,\n  DownloadDirectoryPath: RNFSManager.RNFSDownloadDirectoryPath,\n  ExternalDirectoryPath: RNFSManager.RNFSExternalDirectoryPath,\n  ExternalStorageDirectoryPath: RNFSManager.RNFSExternalStorageDirectoryPath,\n  TemporaryDirectoryPath: RNFSManager.RNFSTemporaryDirectoryPath,\n  LibraryDirectoryPath: RNFSManager.RNFSLibraryDirectoryPath,\n  PicturesDirectoryPath: RNFSManager.RNFSPicturesDirectoryPath,\n  FileProtectionKeys: RNFSManager.RNFSFileProtectionKeys\n};\n\nmodule.exports = RNFS;\n"],"names":["RNFSManager","RN","NativeModules","RNFS_NativeEventEmitter","NativeEventEmitter","RNFSFileTypeRegular","RNFSFileTypeDirectory","isIOS","Platform","OS","jobId","getJobId","normalizeFilePath","path","startsWith","slice","readFileGeneric","filepath","command","encodingOrOptions","options","encoding","then","b64","contents","utf8","decode","base64","Error","String","readDirGeneric","dirpath","files","map","file","ctime","Date","mtime","name","size","isFile","type","isDirectory","RNFS","mkdir","moveFile","destPath","copyFile","pathForBundle","bundleNamed","pathForGroup","groupName","getFSInfo","getAllExternalFilesDirs","unlink","exists","stopDownload","resumeDownload","isResumable","stopUpload","completeHandlerIOS","readDir","readDirAssets","existsAssets","existsRes","filename","readdir","setReadable","readable","ownerOnly","result","stat","mode","originalFilepath","readFile","read","length","position","readFileAssets","readFileRes","hash","algorithm","copyFileAssets","copyFileRes","copyAssetsFileIOS","imageUri","width","height","scale","compression","resizeMode","copyAssetsVideoIOS","writeFile","encode","appendFile","write","undefined","downloadFile","fromUrl","toFile","headers","background","progressDivider","progressInterval","readTimeout","connectionTimeout","backgroundTimeout","subscriptions","begin","push","addListener","res","progress","resumable","bridgeOptions","hasBeginCallback","Function","hasProgressCallback","hasResumableCallback","promise","forEach","sub","remove","catch","e","Promise","reject","uploadFiles","toUrl","Array","isArray","fields","method","beginCallback","progressCallback","binaryStreamOnly","touch","ctimeTime","getTime","scanFile","MainBundlePath","RNFSMainBundlePath","CachesDirectoryPath","RNFSCachesDirectoryPath","ExternalCachesDirectoryPath","RNFSExternalCachesDirectoryPath","DocumentDirectoryPath","RNFSDocumentDirectoryPath","DownloadDirectoryPath","RNFSDownloadDirectoryPath","ExternalDirectoryPath","RNFSExternalDirectoryPath","ExternalStorageDirectoryPath","RNFSExternalStorageDirectoryPath","TemporaryDirectoryPath","RNFSTemporaryDirectoryPath","LibraryDirectoryPath","RNFSLibraryDirectoryPath","PicturesDirectoryPath","RNFSPicturesDirectoryPath","FileProtectionKeys","RNFSFileProtectionKeys","module","exports"],"mappings":"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"}