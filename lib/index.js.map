{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * React Native FS\r\n * @flow\r\n */\r\n// This file supports both iOS and Android\r\n\r\nimport RN from \"react-native\";\r\nimport base64 from \"base-64\";\r\nimport utf8 from \"utf8\";\r\n\r\nvar RNFSManager = RN.NativeModules.RNFSManager;\r\nvar NativeEventEmitter = RN.NativeEventEmitter;\r\nvar RNFS_NativeEventEmitter = new NativeEventEmitter(RNFSManager);\r\nvar RNFSFileTypeRegular = RNFSManager.RNFSFileTypeRegular;\r\nvar RNFSFileTypeDirectory = RNFSManager.RNFSFileTypeDirectory;\r\n\r\nvar isIOS = RN.Platform.OS === \"ios\";\r\nvar jobId = 0;\r\n\r\nvar getJobId = () => {\r\n  jobId += 1;\r\n  return jobId;\r\n};\r\n\r\nvar normalizeFilePath = (path: string) =>\r\n  path.startsWith(\"file://\") ? path.slice(7) : path;\r\n\r\ntype MkdirOptions = {\r\n  NSURLIsExcludedFromBackupKey?: boolean; // iOS only\r\n  NSFileProtectionKey?: string; // IOS only\r\n};\r\n\r\ntype FileOptions = {\r\n  NSFileProtectionKey?: string; // IOS only\r\n};\r\n\r\ntype ReadDirItem = {\r\n  ctime?: Date; // The creation date of the file (iOS only)\r\n  mtime?: Date; // The last modified date of the file\r\n  name: string; // The name of the item\r\n  path: string; // The absolute path to the item\r\n  size: string; // Size in bytes\r\n  isFile: () => boolean; // Is the file just a file?\r\n  isDirectory: () => boolean; // Is the file a directory?\r\n};\r\n\r\ntype StatResult = {\r\n  name?: string; // The name of the item TODO: why is this not documented?\r\n  path: string; // The absolute path to the item\r\n  size: string; // Size in bytes\r\n  mode: number; // UNIX file mode\r\n  ctime: number; // Created date\r\n  mtime: number; // Last modified date\r\n  originalFilepath: string; // In case of content uri this is the pointed file path, otherwise is the same as path\r\n  isFile: () => boolean; // Is the file just a file?\r\n  isDirectory: () => boolean; // Is the file a directory?\r\n};\r\n\r\ntype Headers = { [name: string]: string };\r\ntype Fields = { [name: string]: string };\r\n\r\ntype DownloadFileOptions = {\r\n  fromUrl: string; // URL to download file from\r\n  toFile: string; // Local filesystem path to save the file to\r\n  headers?: Headers; // An object of headers to be passed to the server\r\n  background?: boolean; // Continue the download in the background after the app terminates (iOS only)\r\n  discretionary?: boolean; // Allow the OS to control the timing and speed of the download to improve perceived performance  (iOS only)\r\n  cacheable?: boolean; // Whether the download can be stored in the shared NSURLCache (iOS only)\r\n  progressInterval?: number;\r\n  progressDivider?: number;\r\n  begin?: (res: DownloadBeginCallbackResult) => void;\r\n  progress?: (res: DownloadProgressCallbackResult) => void;\r\n  resumable?: () => void; // only supported on iOS yet\r\n  connectionTimeout?: number; // only supported on Android yet\r\n  readTimeout?: number; // supported on Android and iOS\r\n  backgroundTimeout?: number; // Maximum time (in milliseconds) to download an entire resource (iOS only, useful for timing out background downloads)\r\n};\r\n\r\ntype DownloadBeginCallbackResult = {\r\n  jobId: number; // The download job ID, required if one wishes to cancel the download. See `stopDownload`.\r\n  statusCode: number; // The HTTP status code\r\n  contentLength: number; // The total size in bytes of the download resource\r\n  headers: Headers; // The HTTP response headers from the server\r\n};\r\n\r\ntype DownloadProgressCallbackResult = {\r\n  jobId: number; // The download job ID, required if one wishes to cancel the download. See `stopDownload`.\r\n  contentLength: number; // The total size in bytes of the download resource\r\n  bytesWritten: number; // The number of bytes written to the file so far\r\n};\r\n\r\ntype DownloadResult = {\r\n  jobId: number; // The download job ID, required if one wishes to cancel the download. See `stopDownload`.\r\n  statusCode: number; // The HTTP status code\r\n  bytesWritten: number; // The number of bytes written to the file\r\n};\r\n\r\ntype UploadFileOptions = {\r\n  toUrl: string; // URL to upload file to\r\n  binaryStreamOnly?: boolean; // Allow for binary data stream for file to be uploaded without extra headers, Default is 'false'\r\n  files: UploadFileItem[]; // An array of objects with the file information to be uploaded.\r\n  headers?: Headers; // An object of headers to be passed to the server\r\n  fields?: Fields; // An object of fields to be passed to the server\r\n  method?: string; // Default is 'POST', supports 'POST' and 'PUT'\r\n  beginCallback?: (res: UploadBeginCallbackResult) => void; // deprecated\r\n  progressCallback?: (res: UploadProgressCallbackResult) => void; // deprecated\r\n  begin?: (res: UploadBeginCallbackResult) => void;\r\n  progress?: (res: UploadProgressCallbackResult) => void;\r\n};\r\n\r\ntype UploadFileItem = {\r\n  name: string; // Name of the file, if not defined then filename is used\r\n  filename: string; // Name of file\r\n  filepath: string; // Path to file\r\n  filetype: string; // The mimetype of the file to be uploaded, if not defined it will get mimetype from `filepath` extension\r\n};\r\n\r\ntype UploadBeginCallbackResult = {\r\n  jobId: number; // The upload job ID, required if one wishes to cancel the upload. See `stopUpload`.\r\n};\r\n\r\ntype UploadProgressCallbackResult = {\r\n  jobId: number; // The upload job ID, required if one wishes to cancel the upload. See `stopUpload`.\r\n  totalBytesExpectedToSend: number; // The total number of bytes that will be sent to the server\r\n  totalBytesSent: number; // The number of bytes sent to the server\r\n};\r\n\r\ntype UploadResult = {\r\n  jobId: number; // The upload job ID, required if one wishes to cancel the upload. See `stopUpload`.\r\n  statusCode: number; // The HTTP status code\r\n  headers: Headers; // The HTTP response headers from the server\r\n  body: string; // The HTTP response body\r\n};\r\n\r\ntype FSInfoResult = {\r\n  totalSpace: number; // The total amount of storage space on the device (in bytes).\r\n  freeSpace: number; // The amount of available storage space on the device (in bytes).\r\n};\r\n\r\n/**\r\n * Generic function used by readFile and readFileAssets\r\n */\r\nfunction readFileGeneric(\r\n  filepath: string,\r\n  command: Function,\r\n  encodingOrOptions?: string\r\n) {\r\n  var options = {\r\n    encoding: \"utf8\",\r\n  };\r\n\r\n  if (encodingOrOptions) {\r\n    if (typeof encodingOrOptions === \"string\") {\r\n      options.encoding = encodingOrOptions;\r\n    } else if (typeof encodingOrOptions === \"object\") {\r\n      options = encodingOrOptions;\r\n    }\r\n  }\r\n\r\n  return command(normalizeFilePath(filepath)).then((b64) => {\r\n    var contents;\r\n\r\n    if (options.encoding === \"utf8\") {\r\n      contents = utf8.decode(base64.decode(b64));\r\n    } else if (options.encoding === \"ascii\") {\r\n      contents = base64.decode(b64);\r\n    } else if (options.encoding === \"base64\") {\r\n      contents = b64;\r\n    } else {\r\n      throw new Error(\r\n        'Invalid encoding type \"' + String(options.encoding) + '\"'\r\n      );\r\n    }\r\n\r\n    return contents;\r\n  });\r\n}\r\n\r\n/**\r\n * Generic function used by readDir and readDirAssets\r\n */\r\nfunction readDirGeneric(dirpath: string, command: Function) {\r\n  return command(normalizeFilePath(dirpath)).then((files) => {\r\n    return files.map((file) => ({\r\n      ctime: (file.ctime && new Date(file.ctime * 1000)) || null,\r\n      mtime: (file.mtime && new Date(file.mtime * 1000)) || null,\r\n      name: file.name,\r\n      path: file.path,\r\n      size: file.size,\r\n      isFile: () => file.type === RNFSFileTypeRegular,\r\n      isDirectory: () => file.type === RNFSFileTypeDirectory,\r\n    }));\r\n  });\r\n}\r\n\r\nvar RNFS = {\r\n  mkdir(filepath: string, options: MkdirOptions = {}): Promise<void> {\r\n    return RNFSManager.mkdir(normalizeFilePath(filepath), options).then(\r\n      () => void 0\r\n    );\r\n  },\r\n\r\n  moveFile(\r\n    filepath: string,\r\n    destPath: string,\r\n    options: FileOptions = {}\r\n  ): Promise<void> {\r\n    return RNFSManager.moveFile(\r\n      normalizeFilePath(filepath),\r\n      normalizeFilePath(destPath),\r\n      options\r\n    ).then(() => void 0);\r\n  },\r\n\r\n  copyFile(\r\n    filepath: string,\r\n    destPath: string,\r\n    options: FileOptions = {}\r\n  ): Promise<void> {\r\n    return RNFSManager.copyFile(\r\n      normalizeFilePath(filepath),\r\n      normalizeFilePath(destPath),\r\n      options\r\n    ).then(() => void 0);\r\n  },\r\n\r\n  pathForBundle(bundleNamed: string): Promise<string> {\r\n    return RNFSManager.pathForBundle(bundleNamed);\r\n  },\r\n\r\n  pathForGroup(groupName: string): Promise<string> {\r\n    return RNFSManager.pathForGroup(groupName);\r\n  },\r\n\r\n  getFSInfo(): Promise<FSInfoResult> {\r\n    return RNFSManager.getFSInfo();\r\n  },\r\n\r\n  getAllExternalFilesDirs(): Promise<string> {\r\n    return RNFSManager.getAllExternalFilesDirs();\r\n  },\r\n\r\n  unlink(filepath: string): Promise<void> {\r\n    return RNFSManager.unlink(normalizeFilePath(filepath)).then(() => void 0);\r\n  },\r\n\r\n  exists(filepath: string): Promise<boolean> {\r\n    return RNFSManager.exists(normalizeFilePath(filepath));\r\n  },\r\n\r\n  stopDownload(jobId: number): void {\r\n    RNFSManager.stopDownload(jobId);\r\n  },\r\n\r\n  resumeDownload(jobId: number): void {\r\n    RNFSManager.resumeDownload(jobId);\r\n  },\r\n\r\n  isResumable(jobId: number): Promise<boolean> {\r\n    return RNFSManager.isResumable(jobId);\r\n  },\r\n\r\n  stopUpload(jobId: number): void {\r\n    RNFSManager.stopUpload(jobId);\r\n  },\r\n\r\n  completeHandlerIOS(jobId: number): void {\r\n    return RNFSManager.completeHandlerIOS(jobId);\r\n  },\r\n\r\n  readDir(dirpath: string): Promise<ReadDirItem[]> {\r\n    return readDirGeneric(dirpath, RNFSManager.readDir);\r\n  },\r\n\r\n  // Android-only\r\n  readDirAssets(dirpath: string): Promise<ReadDirItem[]> {\r\n    if (!RNFSManager.readDirAssets) {\r\n      throw new Error(\"readDirAssets is not available on this platform\");\r\n    }\r\n    return readDirGeneric(dirpath, RNFSManager.readDirAssets);\r\n  },\r\n\r\n  // Android-only\r\n  existsAssets(filepath: string) {\r\n    if (!RNFSManager.existsAssets) {\r\n      throw new Error(\"existsAssets is not available on this platform\");\r\n    }\r\n    return RNFSManager.existsAssets(filepath);\r\n  },\r\n\r\n  // Android-only\r\n  existsRes(filename: string) {\r\n    if (!RNFSManager.existsRes) {\r\n      throw new Error(\"existsRes is not available on this platform\");\r\n    }\r\n    return RNFSManager.existsRes(filename);\r\n  },\r\n\r\n  // Node style version (lowercase d). Returns just the names\r\n  readdir(dirpath: string): Promise<string[]> {\r\n    return RNFS.readDir(normalizeFilePath(dirpath)).then((files) => {\r\n      return files.map((file) => file.name);\r\n    });\r\n  },\r\n\r\n  // setReadable for Android\r\n  setReadable(\r\n    filepath: string,\r\n    readable: boolean,\r\n    ownerOnly: boolean\r\n  ): Promise<boolean> {\r\n    return RNFSManager.setReadable(filepath, readable, ownerOnly).then(\r\n      (result) => {\r\n        return result;\r\n      }\r\n    );\r\n  },\r\n\r\n  stat(filepath: string): Promise<StatResult> {\r\n    return RNFSManager.stat(normalizeFilePath(filepath)).then((result) => {\r\n      return {\r\n        path: filepath,\r\n        ctime: new Date(result.ctime * 1000),\r\n        mtime: new Date(result.mtime * 1000),\r\n        size: result.size,\r\n        mode: result.mode,\r\n        originalFilepath: result.originalFilepath,\r\n        isFile: () => result.type === RNFSFileTypeRegular,\r\n        isDirectory: () => result.type === RNFSFileTypeDirectory,\r\n      };\r\n    });\r\n  },\r\n\r\n  readFile(filepath: string, encodingOrOptions?: any): Promise<string> {\r\n    return readFileGeneric(filepath, RNFSManager.readFile, encodingOrOptions);\r\n  },\r\n\r\n  read(\r\n    filepath: string,\r\n    length: number = 0,\r\n    position: number = 0,\r\n    encodingOrOptions?: any\r\n  ): Promise<string> {\r\n    var options = {\r\n      encoding: \"utf8\",\r\n    };\r\n\r\n    if (encodingOrOptions) {\r\n      if (typeof encodingOrOptions === \"string\") {\r\n        options.encoding = encodingOrOptions;\r\n      } else if (typeof encodingOrOptions === \"object\") {\r\n        options = encodingOrOptions;\r\n      }\r\n    }\r\n\r\n    return RNFSManager.read(normalizeFilePath(filepath), length, position).then(\r\n      (b64) => {\r\n        var contents;\r\n\r\n        if (options.encoding === \"utf8\") {\r\n          contents = utf8.decode(base64.decode(b64));\r\n        } else if (options.encoding === \"ascii\") {\r\n          contents = base64.decode(b64);\r\n        } else if (options.encoding === \"base64\") {\r\n          contents = b64;\r\n        } else {\r\n          throw new Error(\r\n            'Invalid encoding type \"' + String(options.encoding) + '\"'\r\n          );\r\n        }\r\n\r\n        return contents;\r\n      }\r\n    );\r\n  },\r\n\r\n  // Android only\r\n  readFileAssets(filepath: string, encodingOrOptions?: any): Promise<string> {\r\n    if (!RNFSManager.readFileAssets) {\r\n      throw new Error(\"readFileAssets is not available on this platform\");\r\n    }\r\n    return readFileGeneric(\r\n      filepath,\r\n      RNFSManager.readFileAssets,\r\n      encodingOrOptions\r\n    );\r\n  },\r\n\r\n  // Android only\r\n  readFileRes(filename: string, encodingOrOptions?: any): Promise<string> {\r\n    if (!RNFSManager.readFileRes) {\r\n      throw new Error(\"readFileRes is not available on this platform\");\r\n    }\r\n    return readFileGeneric(\r\n      filename,\r\n      RNFSManager.readFileRes,\r\n      encodingOrOptions\r\n    );\r\n  },\r\n\r\n  hash(filepath: string, algorithm: string): Promise<string> {\r\n    return RNFSManager.hash(normalizeFilePath(filepath), algorithm);\r\n  },\r\n\r\n  // Android only\r\n  copyFileAssets(filepath: string, destPath: string) {\r\n    if (!RNFSManager.copyFileAssets) {\r\n      throw new Error(\"copyFileAssets is not available on this platform\");\r\n    }\r\n    return RNFSManager.copyFileAssets(\r\n      normalizeFilePath(filepath),\r\n      normalizeFilePath(destPath)\r\n    ).then(() => void 0);\r\n  },\r\n\r\n  // Android only\r\n  copyFileRes(filename: string, destPath: string) {\r\n    if (!RNFSManager.copyFileRes) {\r\n      throw new Error(\"copyFileRes is not available on this platform\");\r\n    }\r\n    return RNFSManager.copyFileRes(filename, normalizeFilePath(destPath)).then(\r\n      () => void 0\r\n    );\r\n  },\r\n\r\n  // iOS only\r\n  // Copies fotos from asset-library (camera-roll) to a specific location\r\n  // with a given width or height\r\n  // @see: https://developer.apple.com/reference/photos/phimagemanager/1616964-requestimageforasset\r\n  copyAssetsFileIOS(\r\n    imageUri: string,\r\n    destPath: string,\r\n    width: number,\r\n    height: number,\r\n    scale: number = 1.0,\r\n    compression: number = 1.0,\r\n    resizeMode: string = \"contain\"\r\n  ): Promise<string> {\r\n    return RNFSManager.copyAssetsFileIOS(\r\n      imageUri,\r\n      destPath,\r\n      width,\r\n      height,\r\n      scale,\r\n      compression,\r\n      resizeMode\r\n    );\r\n  },\r\n\r\n  // iOS only\r\n  // Copies fotos from asset-library (camera-roll) to a specific location\r\n  // with a given width or height\r\n  // @see: https://developer.apple.com/reference/photos/phimagemanager/1616964-requestimageforasset\r\n  copyAssetsVideoIOS(imageUri: string, destPath: string): Promise<string> {\r\n    return RNFSManager.copyAssetsVideoIOS(imageUri, destPath);\r\n  },\r\n\r\n  writeFile(\r\n    filepath: string,\r\n    contents: string,\r\n    encodingOrOptions?: any\r\n  ): Promise<void> {\r\n    var b64;\r\n\r\n    var options = {\r\n      encoding: \"utf8\",\r\n    };\r\n\r\n    if (encodingOrOptions) {\r\n      if (typeof encodingOrOptions === \"string\") {\r\n        options.encoding = encodingOrOptions;\r\n      } else if (typeof encodingOrOptions === \"object\") {\r\n        options = {\r\n          ...options,\r\n          ...encodingOrOptions,\r\n        };\r\n      }\r\n    }\r\n\r\n    if (options.encoding === \"utf8\") {\r\n      b64 = base64.encode(utf8.encode(contents));\r\n    } else if (options.encoding === \"ascii\") {\r\n      b64 = base64.encode(contents);\r\n    } else if (options.encoding === \"base64\") {\r\n      b64 = contents;\r\n    } else {\r\n      throw new Error('Invalid encoding type \"' + options.encoding + '\"');\r\n    }\r\n\r\n    return RNFSManager.writeFile(\r\n      normalizeFilePath(filepath),\r\n      b64,\r\n      options\r\n    ).then(() => void 0);\r\n  },\r\n\r\n  appendFile(\r\n    filepath: string,\r\n    contents: string,\r\n    encodingOrOptions?: any\r\n  ): Promise<void> {\r\n    var b64;\r\n\r\n    var options = {\r\n      encoding: \"utf8\",\r\n    };\r\n\r\n    if (encodingOrOptions) {\r\n      if (typeof encodingOrOptions === \"string\") {\r\n        options.encoding = encodingOrOptions;\r\n      } else if (typeof encodingOrOptions === \"object\") {\r\n        options = encodingOrOptions;\r\n      }\r\n    }\r\n\r\n    if (options.encoding === \"utf8\") {\r\n      b64 = base64.encode(utf8.encode(contents));\r\n    } else if (options.encoding === \"ascii\") {\r\n      b64 = base64.encode(contents);\r\n    } else if (options.encoding === \"base64\") {\r\n      b64 = contents;\r\n    } else {\r\n      throw new Error('Invalid encoding type \"' + options.encoding + '\"');\r\n    }\r\n\r\n    return RNFSManager.appendFile(normalizeFilePath(filepath), b64);\r\n  },\r\n\r\n  write(\r\n    filepath: string,\r\n    contents: string,\r\n    position?: number,\r\n    encodingOrOptions?: any\r\n  ): Promise<void> {\r\n    var b64;\r\n\r\n    var options = {\r\n      encoding: \"utf8\",\r\n    };\r\n\r\n    if (encodingOrOptions) {\r\n      if (typeof encodingOrOptions === \"string\") {\r\n        options.encoding = encodingOrOptions;\r\n      } else if (typeof encodingOrOptions === \"object\") {\r\n        options = encodingOrOptions;\r\n      }\r\n    }\r\n\r\n    if (options.encoding === \"utf8\") {\r\n      b64 = base64.encode(utf8.encode(contents));\r\n    } else if (options.encoding === \"ascii\") {\r\n      b64 = base64.encode(contents);\r\n    } else if (options.encoding === \"base64\") {\r\n      b64 = contents;\r\n    } else {\r\n      throw new Error('Invalid encoding type \"' + options.encoding + '\"');\r\n    }\r\n\r\n    if (position === undefined) {\r\n      position = -1;\r\n    }\r\n\r\n    return RNFSManager.write(normalizeFilePath(filepath), b64, position).then(\r\n      () => void 0\r\n    );\r\n  },\r\n\r\n  downloadFile(options: DownloadFileOptions): {\r\n    jobId: number;\r\n    promise: Promise<DownloadResult>;\r\n  } {\r\n    if (typeof options !== \"object\")\r\n      throw new Error(\"downloadFile: Invalid value for argument `options`\");\r\n    if (typeof options.fromUrl !== \"string\")\r\n      throw new Error(\"downloadFile: Invalid value for property `fromUrl`\");\r\n    if (typeof options.toFile !== \"string\")\r\n      throw new Error(\"downloadFile: Invalid value for property `toFile`\");\r\n    if (options.headers && typeof options.headers !== \"object\")\r\n      throw new Error(\"downloadFile: Invalid value for property `headers`\");\r\n    if (options.background && typeof options.background !== \"boolean\")\r\n      throw new Error(\"downloadFile: Invalid value for property `background`\");\r\n    if (options.progressDivider && typeof options.progressDivider !== \"number\")\r\n      throw new Error(\r\n        \"downloadFile: Invalid value for property `progressDivider`\"\r\n      );\r\n    if (\r\n      options.progressInterval &&\r\n      typeof options.progressInterval !== \"number\"\r\n    )\r\n      throw new Error(\r\n        \"downloadFile: Invalid value for property `progressInterval`\"\r\n      );\r\n    if (options.readTimeout && typeof options.readTimeout !== \"number\")\r\n      throw new Error(\"downloadFile: Invalid value for property `readTimeout`\");\r\n    if (\r\n      options.connectionTimeout &&\r\n      typeof options.connectionTimeout !== \"number\"\r\n    )\r\n      throw new Error(\r\n        \"downloadFile: Invalid value for property `connectionTimeout`\"\r\n      );\r\n    if (\r\n      options.backgroundTimeout &&\r\n      typeof options.backgroundTimeout !== \"number\"\r\n    )\r\n      throw new Error(\r\n        \"downloadFile: Invalid value for property `backgroundTimeout`\"\r\n      );\r\n\r\n    var jobId = getJobId();\r\n    var subscriptions = [];\r\n\r\n    if (options.begin) {\r\n      subscriptions.push(\r\n        RNFS_NativeEventEmitter.addListener(\"DownloadBegin\", (res) => {\r\n          if (res.jobId === jobId) options.begin(res);\r\n        })\r\n      );\r\n    }\r\n\r\n    if (options.progress) {\r\n      subscriptions.push(\r\n        RNFS_NativeEventEmitter.addListener(\"DownloadProgress\", (res) => {\r\n          if (res.jobId === jobId) options.progress(res);\r\n        })\r\n      );\r\n    }\r\n\r\n    if (options.resumable) {\r\n      subscriptions.push(\r\n        RNFS_NativeEventEmitter.addListener(\"DownloadResumable\", (res) => {\r\n          if (res.jobId === jobId) options.resumable();\r\n        })\r\n      );\r\n    }\r\n\r\n    var bridgeOptions = {\r\n      jobId: jobId,\r\n      fromUrl: options.fromUrl,\r\n      toFile: normalizeFilePath(options.toFile),\r\n      headers: options.headers || {},\r\n      background: !!options.background,\r\n      progressDivider: options.progressDivider || 0,\r\n      progressInterval: options.progressInterval || 0,\r\n      readTimeout: options.readTimeout || 15000,\r\n      connectionTimeout: options.connectionTimeout || 5000,\r\n      backgroundTimeout: options.backgroundTimeout || 3600000, // 1 hour\r\n      hasBeginCallback: options.begin instanceof Function,\r\n      hasProgressCallback: options.progress instanceof Function,\r\n      hasResumableCallback: options.resumable instanceof Function,\r\n    };\r\n\r\n    return {\r\n      jobId,\r\n      promise: RNFSManager.downloadFile(bridgeOptions)\r\n        .then((res) => {\r\n          subscriptions.forEach((sub) => sub.remove());\r\n          return res;\r\n        })\r\n        .catch((e) => {\r\n          return Promise.reject(e);\r\n        }),\r\n    };\r\n  },\r\n\r\n  uploadFiles(options: UploadFileOptions): {\r\n    jobId: number;\r\n    promise: Promise<UploadResult>;\r\n  } {\r\n    if (!RNFSManager.uploadFiles) {\r\n      return {\r\n        jobId: -1,\r\n        promise: Promise.reject(\r\n          new Error(\"`uploadFiles` is unsupported on this platform\")\r\n        ),\r\n      };\r\n    }\r\n\r\n    var jobId = getJobId();\r\n    var subscriptions = [];\r\n\r\n    if (typeof options !== \"object\")\r\n      throw new Error(\"uploadFiles: Invalid value for argument `options`\");\r\n    if (typeof options.toUrl !== \"string\")\r\n      throw new Error(\"uploadFiles: Invalid value for property `toUrl`\");\r\n    if (!Array.isArray(options.files))\r\n      throw new Error(\"uploadFiles: Invalid value for property `files`\");\r\n    if (options.headers && typeof options.headers !== \"object\")\r\n      throw new Error(\"uploadFiles: Invalid value for property `headers`\");\r\n    if (options.fields && typeof options.fields !== \"object\")\r\n      throw new Error(\"uploadFiles: Invalid value for property `fields`\");\r\n    if (options.method && typeof options.method !== \"string\")\r\n      throw new Error(\"uploadFiles: Invalid value for property `method`\");\r\n\r\n    if (options.begin) {\r\n      subscriptions.push(\r\n        RNFS_NativeEventEmitter.addListener(\"UploadBegin\", options.begin)\r\n      );\r\n    } else if (options.beginCallback) {\r\n      // Deprecated\r\n      subscriptions.push(\r\n        RNFS_NativeEventEmitter.addListener(\r\n          \"UploadBegin\",\r\n          options.beginCallback\r\n        )\r\n      );\r\n    }\r\n\r\n    if (options.progress) {\r\n      subscriptions.push(\r\n        RNFS_NativeEventEmitter.addListener(\"UploadProgress\", options.progress)\r\n      );\r\n    } else if (options.progressCallback) {\r\n      // Deprecated\r\n      subscriptions.push(\r\n        RNFS_NativeEventEmitter.addListener(\r\n          \"UploadProgress\",\r\n          options.progressCallback\r\n        )\r\n      );\r\n    }\r\n\r\n    var bridgeOptions = {\r\n      jobId: jobId,\r\n      toUrl: options.toUrl,\r\n      files: options.files,\r\n      binaryStreamOnly: options.binaryStreamOnly || false,\r\n      headers: options.headers || {},\r\n      fields: options.fields || {},\r\n      method: options.method || \"POST\",\r\n      hasBeginCallback:\r\n        options.begin instanceof Function ||\r\n        options.beginCallback instanceof Function,\r\n      hasProgressCallback:\r\n        options.progress instanceof Function ||\r\n        options.progressCallback instanceof Function,\r\n    };\r\n\r\n    return {\r\n      jobId,\r\n      promise: RNFSManager.uploadFiles(bridgeOptions).then((res) => {\r\n        subscriptions.forEach((sub) => sub.remove());\r\n        return res;\r\n      }),\r\n    };\r\n  },\r\n\r\n  touch(filepath: string, mtime?: Date, ctime?: Date): Promise<void> {\r\n    if (ctime && !(ctime instanceof Date))\r\n      throw new Error(\"touch: Invalid value for argument `ctime`\");\r\n    if (mtime && !(mtime instanceof Date))\r\n      throw new Error(\"touch: Invalid value for argument `mtime`\");\r\n    var ctimeTime = 0;\r\n    if (isIOS) {\r\n      ctimeTime = ctime && ctime.getTime();\r\n    }\r\n    return RNFSManager.touch(\r\n      normalizeFilePath(filepath),\r\n      mtime && mtime.getTime(),\r\n      ctimeTime\r\n    );\r\n  },\r\n\r\n  scanFile(path: string): Promise<ReadDirItem[]> {\r\n    return RNFSManager.scanFile(path);\r\n  },\r\n\r\n  MainBundlePath: RNFSManager.RNFSMainBundlePath,\r\n  CachesDirectoryPath: RNFSManager.RNFSCachesDirectoryPath,\r\n  ExternalCachesDirectoryPath: RNFSManager.RNFSExternalCachesDirectoryPath,\r\n  DocumentDirectoryPath: RNFSManager.RNFSDocumentDirectoryPath,\r\n  DownloadDirectoryPath: RNFSManager.RNFSDownloadDirectoryPath,\r\n  ExternalDirectoryPath: RNFSManager.RNFSExternalDirectoryPath,\r\n  ExternalStorageDirectoryPath: RNFSManager.RNFSExternalStorageDirectoryPath,\r\n  TemporaryDirectoryPath: RNFSManager.RNFSTemporaryDirectoryPath,\r\n  LibraryDirectoryPath: RNFSManager.RNFSLibraryDirectoryPath,\r\n  PicturesDirectoryPath: RNFSManager.RNFSPicturesDirectoryPath,\r\n  FileProtectionKeys: RNFSManager.RNFSFileProtectionKeys,\r\n};\r\n\r\nmodule.exports = RNFS;\r\n"]}